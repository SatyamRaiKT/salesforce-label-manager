// metadata-api-prototype/index.js

const express = require('express');
const { Parser } = require('json2csv');
const multer = require('multer');
const fs = require('fs');
const csv = require('csv-parser');
const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(express.json());

// In-memory data store (mock DB)
let metadataStore = [
  { id: 1, name: 'Item A', type: 'Type 1' },
  { id: 2, name: 'Item B', type: 'Type 2' }
];

// CRUD: Read all
app.get('/api/metadata', (req, res) => {
  res.json(metadataStore);
});

// CRUD: Create
app.post('/api/metadata', (req, res) => {
  const newItem = { id: Date.now(), ...req.body };
  metadataStore.push(newItem);
  res.status(201).json(newItem);
});

// CRUD: Update
app.put('/api/metadata/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = metadataStore.findIndex(item => item.id === id);
  if (index === -1) return res.status(404).send('Item not found');
  metadataStore[index] = { ...metadataStore[index], ...req.body };
  res.json(metadataStore[index]);
});

// CRUD: Delete
app.delete('/api/metadata/:id', (req, res) => {
  const id = parseInt(req.params.id);
  metadataStore = metadataStore.filter(item => item.id !== id);
  res.status(204).send();
});

// Export to CSV
app.get('/export/csv', (req, res) => {
  const parser = new Parser();
  const csvData = parser.parse(metadataStore);
  res.header('Content-Type', 'text/csv');
  res.attachment('metadata.csv');
  res.send(csvData);
});

// Import CSV
app.post('/import/csv', upload.single('file'), (req, res) => {
  const results = [];
  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (data) => results.push(data))
    .on('end', () => {
      metadataStore = metadataStore.concat(results.map((r, i) => ({ id: Date.now() + i, ...r })));
      res.send({ imported: results.length });
    });
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
